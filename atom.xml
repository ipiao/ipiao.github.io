<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欣欣然不知所以</title>
  
  <subtitle>......</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ipiao.top/"/>
  <updated>2018-12-27T10:34:19.324Z</updated>
  <id>http://ipiao.top/</id>
  
  <author>
    <name>ipiao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Leetcode 21-30</title>
    <link href="http://ipiao.top/2018/12/27/Leetcode-21-30/"/>
    <id>http://ipiao.top/2018/12/27/Leetcode-21-30/</id>
    <published>2018-12-27T07:17:00.000Z</published>
    <updated>2018-12-27T10:34:19.324Z</updated>
    
    <content type="html"><![CDATA[<h4 id="21-合并两个有序链表"><a href="#21-合并两个有序链表" class="headerlink" title="21. 合并两个有序链表"></a>21. 合并两个有序链表</h4><blockquote>  <p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。<br>示例：<br>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4<br>输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p></blockquote><a id="more"></a><ul>  <li>    <p>code</p>    <figure class="highlight go">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre>          </td>          <td class="code">            <pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeTwoLists</span><span class="params">(l1 *ListNode, l2 *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> l1 == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> l2</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> l2 == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> l1</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> root = <span class="built_in">new</span>(ListNode)</span><br><span class="line">    <span class="keyword">if</span> l1.Val &lt; l2.Val&#123;</span><br><span class="line">        root.Val = l1.Val</span><br><span class="line">        l1 = l1.Next</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        root.Val = l2.Val</span><br><span class="line">        l2 = l2.Next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> l1 !=<span class="literal">nil</span> || l2!=<span class="literal">nil</span>&#123;</span><br><span class="line">        root.Next = mergeTwoLists(l1, l2)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul><h4 id="22-括号生成"><a href="#22-括号生成" class="headerlink" title="22. 括号生成"></a>22. 括号生成</h4><blockquote>  <p>给出 n 代表生成括号的对数，请你写出一个函数，使其能够生成所有可能的并且有效的括号组合。<br>例如，给出 n = 3，生成结果为：<br>[<br> “((()))”,<br> “(()())”,<br> “(())()”,<br> “()(())”,<br> “()()()”<br>]</p></blockquote><ul>  <li>    <p>code</p>    <figure class="highlight go">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre>          </td>          <td class="code">            <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generateParenthesis</span><span class="params">(n <span class="keyword">int</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> ans = []<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">    generate(&amp;ans, <span class="string">""</span>, <span class="number">0</span>, <span class="number">0</span>, n)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generate</span><span class="params">(ans *[]<span class="keyword">string</span>,cur <span class="keyword">string</span>,l <span class="keyword">int</span>, r <span class="keyword">int</span>, max <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(cur) == max*<span class="number">2</span>&#123;</span><br><span class="line">        *ans = <span class="built_in">append</span>(*ans, cur)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> l &lt; max&#123;</span><br><span class="line">         generate(ans, cur + <span class="string">"("</span>, l+<span class="number">1</span>, r, max)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> r &lt; l&#123;</span><br><span class="line">        generate(ans, cur + <span class="string">")"</span>, l, r+<span class="number">1</span>, max)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul><h4 id="23-合并K个排序链表"><a href="#23-合并K个排序链表" class="headerlink" title="23. 合并K个排序链表"></a>23. 合并K个排序链表</h4><blockquote>  <p>合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。</p></blockquote><ul>  <li>    <p>code</p>    <figure class="highlight go">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre>          </td>          <td class="code">            <pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeKLists</span><span class="params">(lists []*ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(lists) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(lists) == <span class="number">1</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lists[<span class="number">0</span>]</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mergeTwoLists(mergeKLists(lists[:<span class="built_in">len</span>(lists)/<span class="number">2</span>]), mergeKLists(lists[<span class="built_in">len</span>(lists)/<span class="number">2</span>:]))</span><br><span class="line">&#125;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;21-合并两个有序链表&quot;&gt;&lt;a href=&quot;#21-合并两个有序链表&quot; class=&quot;headerlink&quot; title=&quot;21. 合并两个有序链表&quot;&gt;&lt;/a&gt;21. 合并两个有序链表&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。&lt;br&gt;示例：&lt;br&gt;输入：1-&amp;gt;2-&amp;gt;4, 1-&amp;gt;3-&amp;gt;4&lt;br&gt;输出：1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="日常练习" scheme="http://ipiao.top/categories/%E6%97%A5%E5%B8%B8%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="leetcode" scheme="http://ipiao.top/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 11-20</title>
    <link href="http://ipiao.top/2018/12/26/Leetcode-11-20/"/>
    <id>http://ipiao.top/2018/12/26/Leetcode-11-20/</id>
    <published>2018-12-26T07:03:58.000Z</published>
    <updated>2018-12-27T06:33:22.814Z</updated>
    
    <content type="html"><![CDATA[<h4 id="11-盛最多水的容器"><a href="#11-盛最多水的容器" class="headerlink" title="11. 盛最多水的容器"></a>11. 盛最多水的容器</h4><blockquote>  <p>给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p>  <p>说明：你不能倾斜容器，且 n 的值至少为 2。</p></blockquote><p><img src="/images/pasted-1.png" alt="upload successful"></p><blockquote>  <p>解: 1.如果可以使用暴力，很多事情就变得简单了。<br>    <a id="more"></a>  </p></blockquote><ul>  <li>code<figure class="highlight go">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre>          </td>          <td class="code">            <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxArea</span><span class="params">(height []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    s:=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span> ;i&lt;<span class="built_in">len</span>(height)<span class="number">-1</span>;i++&#123;</span><br><span class="line">        <span class="keyword">for</span> j:=i+<span class="number">1</span>;j&lt;<span class="built_in">len</span>(height);j++&#123;</span><br><span class="line">            a:=height[j]*(j-i)</span><br><span class="line">            <span class="keyword">if</span> height[j]&gt; height[i]&#123;</span><br><span class="line">                a = height[i]*(j-i)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> a &gt; s&#123;</span><br><span class="line">                s = a</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul><blockquote>  <p>2.双指针法</p></blockquote><ul>  <li>    <p>code</p>    <figure class="highlight go">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre>          </td>          <td class="code">            <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxArea</span><span class="params">(height []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    l := <span class="built_in">len</span>(height)</span><br><span class="line">    s := <span class="number">0</span></span><br><span class="line">    i,j := <span class="number">0</span>,l<span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> i&lt;j &#123;</span><br><span class="line">        <span class="keyword">var</span> s1 <span class="keyword">int</span></span><br><span class="line">        <span class="keyword">if</span> height[i]&lt;height[j]&#123;</span><br><span class="line">            s1 = height[i]*(j-i)</span><br><span class="line">            i++</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            s1 = height[j]*(j-i)</span><br><span class="line">            j--</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> s1 &gt; s&#123;</span><br><span class="line">           s = s1 </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul><h4 id="12-整数转罗马数字"><a href="#12-整数转罗马数字" class="headerlink" title="12. 整数转罗马数字"></a>12. 整数转罗马数字</h4><blockquote>  <p>罗马数字包含以下七种字符： I， V， X， L，C，D 和 M。</p>  <p>字符 数值<br>I 1<br>V 5<br>X 10<br>L 50<br>C 100<br>D 500<br>M 1000<br>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做 XXVII, 即为 XX + V + II 。</p>  <p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p>  <p>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。<br>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。<br>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。<br>给定一个整数，将其转为罗马数字。输入确保在 1 到 3999 的范围内。</p></blockquote><ul>  <li>    <p>code</p>    <figure class="highlight go">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre>          </td>          <td class="code">            <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">intToRoman</span><span class="params">(num <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> base = []<span class="keyword">int</span>&#123;<span class="number">1000</span>,<span class="number">900</span>, <span class="number">500</span>,<span class="number">400</span>, <span class="number">100</span>,<span class="number">90</span>, <span class="number">50</span>,<span class="number">40</span>, <span class="number">10</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> strs = []<span class="keyword">string</span>&#123;<span class="string">"M"</span>,<span class="string">"CM"</span>, <span class="string">"D"</span>,<span class="string">"CD"</span>,<span class="string">"C"</span>,<span class="string">"XC"</span>,<span class="string">"L"</span>,<span class="string">"XL"</span>,<span class="string">"X"</span>, <span class="string">"IX"</span>,<span class="string">"V"</span>,<span class="string">"IV"</span>,<span class="string">"I"</span>&#125;</span><br><span class="line">    ret := <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i,b:=<span class="keyword">range</span> base&#123;</span><br><span class="line">        x := num/b</span><br><span class="line">        num = num%b</span><br><span class="line">        <span class="keyword">if</span> x!=<span class="number">0</span>&#123;</span><br><span class="line">            <span class="keyword">for</span> j:=<span class="number">0</span>;j&lt;x;j++&#123;</span><br><span class="line">                ret +=strs[i]</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul><h4 id="13-罗马数字转整数"><a href="#13-罗马数字转整数" class="headerlink" title="13. 罗马数字转整数"></a>13. 罗马数字转整数</h4><blockquote>  <p>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</p>  <p>字符 数值<br>I 1<br>V 5<br>X 10<br>L 50<br>C 100<br>D 500<br>M 1000<br>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做 XXVII, 即为 XX + V + II 。</p>  <p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p>  <p>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。<br>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。<br>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。<br>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</p></blockquote><ul>  <li>    <p>code</p>    <figure class="highlight go">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre>          </td>          <td class="code">            <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">romanToInt</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> base = []<span class="keyword">int</span>&#123;<span class="number">1000</span>,<span class="number">900</span>, <span class="number">500</span>,<span class="number">400</span>, <span class="number">100</span>,<span class="number">90</span>, <span class="number">50</span>,<span class="number">40</span>, <span class="number">10</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>&#125;</span><br><span class="line">   <span class="keyword">var</span> strs = []<span class="keyword">string</span>&#123;<span class="string">"M"</span>,<span class="string">"CM"</span>, <span class="string">"D"</span>,<span class="string">"CD"</span>,<span class="string">"C"</span>,<span class="string">"XC"</span>,<span class="string">"L"</span>,<span class="string">"XL"</span>,<span class="string">"X"</span>, <span class="string">"IX"</span>,<span class="string">"V"</span>,<span class="string">"IV"</span>,<span class="string">"I"</span>&#125; </span><br><span class="line"></span><br><span class="line">    ret:=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt; <span class="built_in">len</span>(strs);&#123;</span><br><span class="line">        <span class="keyword">if</span> strings.HasPrefix(s,strs[i])&#123;</span><br><span class="line">            ret+=base[i]  </span><br><span class="line">            s = s[<span class="built_in">len</span>(strs[i]):]</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            i++</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul><h4 id="14-最长公共前缀"><a href="#14-最长公共前缀" class="headerlink" title="14. 最长公共前缀"></a>14. 最长公共前缀</h4><blockquote>  <p>编写一个函数来查找字符串数组中的最长公共前缀。<br>如果不存在公共前缀，返回空字符串 “”。</p></blockquote><ul>  <li>    <p>code</p>    <figure class="highlight go">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre>          </td>          <td class="code">            <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestCommonPrefix</span><span class="params">(strs []<span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(strs)==<span class="number">0</span>&#123;                 <span class="comment">// 如果空，返回“”</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">    base:=strs[<span class="number">0</span>]                   <span class="comment">// 选取第一个字符串作为对比基串</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="built_in">len</span>(base);i++&#123;       </span><br><span class="line">        b:=base[i]</span><br><span class="line">        <span class="keyword">for</span> j:=<span class="number">1</span>;j&lt;<span class="built_in">len</span>(strs);j++&#123;   <span class="comment">// 按索引对比</span></span><br><span class="line">            <span class="keyword">if</span> i&gt;=<span class="built_in">len</span>(strs[j]) || strs[j][i]!=b&#123;</span><br><span class="line">                <span class="keyword">return</span> base[:i]     <span class="comment">// 不想等就返回</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> base</span><br><span class="line">&#125;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul><h4 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a>15. 三数之和</h4><blockquote>  <p>给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。<br>注意：答案中不可以包含重复的三元组。<br>例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，<br>满足要求的三元组集合为：<br>[<br> [-1, 0, 1],<br> [-1, -1, 2]<br>]</p></blockquote><blockquote>  <p>解: 1.分层循环</p></blockquote><ul>  <li>    <p>code</p>    <figure class="highlight go">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre>          </td>          <td class="code">            <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">threeSum</span><span class="params">(nums []<span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">    sort.Ints(nums)</span><br><span class="line">    ret := [][]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    l:=<span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt; l<span class="number">-2</span>; i++&#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i] &gt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> i&gt;<span class="number">0</span> &amp;&amp; nums[i] == nums[i<span class="number">-1</span>]&#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        ts := twoSum(nums[i+<span class="number">1</span>:], -nums[i])</span><br><span class="line">        <span class="keyword">for</span> _,s:=<span class="keyword">range</span> ts&#123;</span><br><span class="line">            ret = <span class="built_in">append</span>(ret, []<span class="keyword">int</span>&#123;nums[i], s[<span class="number">0</span>], s[<span class="number">1</span>]&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="keyword">int</span>, n <span class="keyword">int</span>)</span>[][]<span class="title">int</span></span>&#123;</span><br><span class="line">    ret :=  [][]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="built_in">len</span>(nums)<span class="number">-1</span>;i++&#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i]&gt;n/<span class="number">2</span>&#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> i&gt;<span class="number">0</span> &amp;&amp; nums[i] == nums[i<span class="number">-1</span>]&#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        o,has := one(nums[i+<span class="number">1</span>:], n-nums[i])</span><br><span class="line">        <span class="keyword">if</span> has&#123;</span><br><span class="line">            ret = <span class="built_in">append</span>(ret, []<span class="keyword">int</span>&#123;nums[i], o&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">one</span><span class="params">(nums []<span class="keyword">int</span>,n <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>,<span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">    end:=<span class="built_in">len</span>(nums)<span class="number">-1</span></span><br><span class="line">    start:=<span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> nums[start] == n&#123;</span><br><span class="line">        <span class="keyword">return</span> nums[start],<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> nums[end] == n&#123;</span><br><span class="line">        <span class="keyword">return</span> nums[end],<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> start&lt;end &#123;</span><br><span class="line">        mid := (start+end)/<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> mid &gt; start&#123;</span><br><span class="line">            <span class="keyword">if</span> nums[mid] == n&#123;</span><br><span class="line">               <span class="keyword">return</span> nums[mid],<span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> nums[mid]&gt;n &#123;</span><br><span class="line">                end = mid</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                start = mid</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>,<span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul><blockquote>  <p>2.三指针法</p></blockquote><ul>  <li>    <p>code</p>    <figure class="highlight go">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre>          </td>          <td class="code">            <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">threeSum</span><span class="params">(nums []<span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">    ret := [][]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    sort.Ints(nums)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="built_in">len</span>(nums)<span class="number">-2</span>; i++&#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i] &gt; <span class="number">0</span>&#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i<span class="number">-1</span>]&#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        j, k := i+<span class="number">1</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">for</span> j&lt;k &#123;</span><br><span class="line">            <span class="keyword">if</span> j &gt; i+<span class="number">1</span> &amp;&amp; nums[j] == nums[j<span class="number">-1</span>]&#123;</span><br><span class="line">                j++</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> nums[i] + nums[j] + nums[k] == <span class="number">0</span>&#123;</span><br><span class="line">                ret = <span class="built_in">append</span>(ret, []<span class="keyword">int</span>&#123;nums[i], nums[j], nums[k]&#125;)</span><br><span class="line">                j++</span><br><span class="line">                k--</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> nums[i] + nums[j] + nums[k] &gt; <span class="number">0</span>&#123;</span><br><span class="line">                k--</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                j++</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul><h4 id="16-最接近的三数之和"><a href="#16-最接近的三数之和" class="headerlink" title="16. 最接近的三数之和"></a>16. 最接近的三数之和</h4><blockquote>  <p>给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。<br>例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.<br>与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).</p></blockquote><blockquote>  <p>解: 三指针</p></blockquote><ul>  <li>code<figure class="highlight go">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre>          </td>          <td class="code">            <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">threeSumClosest</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    sort.Ints(nums)</span><br><span class="line">    det:=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="built_in">len</span>(nums)<span class="number">-2</span>; i++&#123;</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>&#123;</span><br><span class="line">            det = nums[<span class="number">0</span>] + nums[<span class="number">1</span>] + nums[<span class="built_in">len</span>(nums)<span class="number">-1</span>] - target</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> nums[i] == nums[i<span class="number">-1</span>]&#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        j, k := i+<span class="number">1</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">for</span> j&lt;k &#123;</span><br><span class="line">            <span class="keyword">if</span> j &gt; i+<span class="number">1</span> &amp;&amp; nums[j] == nums[j<span class="number">-1</span>]&#123;</span><br><span class="line">                j++</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            temp :=  nums[i] + nums[j] + nums[k] - target</span><br><span class="line">            <span class="keyword">if</span> temp == <span class="number">0</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> target</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> abs(temp)&lt; abs(det) &#123;</span><br><span class="line">                    det = temp</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> temp &lt; <span class="number">0</span>&#123;</span><br><span class="line">                    j++</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    k--</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> det + target</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">abs</span><span class="params">(n <span class="keyword">int</span>)</span><span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">0</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -n</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul><h4 id="17-电话号码的字母组合"><a href="#17-电话号码的字母组合" class="headerlink" title="17. 电话号码的字母组合"></a>17. 电话号码的字母组合</h4><blockquote>  <p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。<br>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p></blockquote><p><img src="/images/pasted-2.png" alt="upload successful"></p><ul>  <li>    <p>code</p>    <figure class="highlight go">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre>          </td>          <td class="code">            <pre><span class="line"><span class="comment">// 当然可以做复用</span></span><br><span class="line"> <span class="function"><span class="keyword">func</span> <span class="title">letterCombinations</span><span class="params">(digits <span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">     numMap := <span class="keyword">map</span>[<span class="keyword">byte</span>][]<span class="keyword">string</span>&#123;</span><br><span class="line">         <span class="string">'2'</span>: []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;,</span><br><span class="line">         <span class="string">'3'</span>: []<span class="keyword">string</span>&#123;<span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>&#125;,</span><br><span class="line">         <span class="string">'4'</span>: []<span class="keyword">string</span>&#123;<span class="string">"g"</span>, <span class="string">"h"</span>, <span class="string">"i"</span>&#125;,</span><br><span class="line">         <span class="string">'5'</span>: []<span class="keyword">string</span>&#123;<span class="string">"j"</span>, <span class="string">"k"</span>, <span class="string">"l"</span>&#125;,</span><br><span class="line">         <span class="string">'6'</span>: []<span class="keyword">string</span>&#123;<span class="string">"m"</span>, <span class="string">"n"</span>, <span class="string">"o"</span>&#125;,</span><br><span class="line">         <span class="string">'7'</span>: []<span class="keyword">string</span>&#123;<span class="string">"p"</span>, <span class="string">"q"</span>, <span class="string">"r"</span>, <span class="string">"s"</span>&#125;,</span><br><span class="line">         <span class="string">'8'</span>: []<span class="keyword">string</span>&#123;<span class="string">"t"</span>, <span class="string">"u"</span>, <span class="string">"v"</span>&#125;,</span><br><span class="line">         <span class="string">'9'</span>: []<span class="keyword">string</span>&#123;<span class="string">"w"</span>, <span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>&#125;,</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> <span class="built_in">len</span>(digits) == <span class="number">0</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     fm := numMap[digits[<span class="number">0</span>]]</span><br><span class="line">     <span class="keyword">if</span> <span class="built_in">len</span>(digits) == <span class="number">1</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> fm</span><br><span class="line">     &#125;</span><br><span class="line">     em := letterCombinations(digits[<span class="number">1</span>:])</span><br><span class="line">     ret := []<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">     <span class="keyword">for</span> _,f := <span class="keyword">range</span> fm&#123;</span><br><span class="line">         <span class="keyword">for</span> _,e:=<span class="keyword">range</span> em&#123;</span><br><span class="line">             ret = <span class="built_in">append</span>(ret , f+e)</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> ret</span><br><span class="line"> &#125;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul><h4 id="18-四数之和"><a href="#18-四数之和" class="headerlink" title="18. 四数之和"></a>18. 四数之和</h4><blockquote>  <p>给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。</p>  <p>注意：</p>  <p>答案中不可以包含重复的四元组。</p>  <p>示例：</p>  <p>给定数组 nums = [1, 0, -1, 0, -2, 2]，和 target = 0。</p>  <p>满足要求的四元组集合为：<br>[<br> [-1, 0, 0, 1],<br> [-2, -1, 1, 2],<br> [-2, 0, 0, 2]<br>]</p></blockquote><blockquote>  <p>解:有一句mmp，不知当讲不当讲</p></blockquote><ul>  <li>    <p>code</p>    <figure class="highlight go">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre>          </td>          <td class="code">            <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fourSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">    sort.Ints(nums)</span><br><span class="line">    <span class="keyword">return</span> kSum(nums, <span class="number">4</span>, target)  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// k&gt;=2</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">kSum</span><span class="params">(nums []<span class="keyword">int</span>, k, target <span class="keyword">int</span>)</span>[][]<span class="title">int</span></span>&#123;</span><br><span class="line">    ret := [][]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">2</span>&#123;</span><br><span class="line">        i, j := <span class="number">0</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">for</span> i &lt; j&#123;</span><br><span class="line">            <span class="keyword">if</span> nums[i] &gt; target/<span class="number">2</span>&#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i<span class="number">-1</span>]&#123;</span><br><span class="line">                i++</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> nums[i] + nums[j] == target&#123;</span><br><span class="line">                ret = <span class="built_in">append</span>(ret, []<span class="keyword">int</span>&#123;nums[i], nums[j]&#125;)</span><br><span class="line">                i++</span><br><span class="line">                j--</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> nums[i] + nums[j] &lt; target&#123;</span><br><span class="line">                i++</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                j--</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="built_in">len</span>(nums) - k + <span class="number">1</span>; i++&#123;</span><br><span class="line">            <span class="keyword">if</span> nums[i] &gt;  target/k &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i<span class="number">-1</span>]&#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            ts := kSum(nums[i+<span class="number">1</span>:], k<span class="number">-1</span>, target-nums[i])</span><br><span class="line">            <span class="keyword">for</span> j:=<span class="keyword">range</span> ts&#123; </span><br><span class="line">                r := <span class="built_in">make</span>([]<span class="keyword">int</span>, k)</span><br><span class="line">                r[<span class="number">0</span>] = nums[i]</span><br><span class="line">                <span class="built_in">copy</span>(r[<span class="number">1</span>:], ts[j])</span><br><span class="line">                ret = <span class="built_in">append</span>(ret,r)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul><h4 id="19-删除链表的倒数第N个节点"><a href="#19-删除链表的倒数第N个节点" class="headerlink" title="19. 删除链表的倒数第N个节点"></a>19. 删除链表的倒数第N个节点</h4><blockquote>  <p>给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。</p></blockquote><blockquote>  <p>解: 从头节点与第n个节点同时移动，后一个节点移动至末尾，头节点将移动至倒数第n个节点</p></blockquote><ul>  <li>    <p>code</p>    <figure class="highlight go">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre>          </td>          <td class="code">            <pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeNthFromEnd</span><span class="params">(head *ListNode, n <span class="keyword">int</span>)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    first := head</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; n; i++ &#123;</span><br><span class="line">        first = first.Next</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> npNode *ListNode</span><br><span class="line">    second := head</span><br><span class="line">    <span class="keyword">for</span> first.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">        first = first.Next</span><br><span class="line">        npNode = second</span><br><span class="line">        second = second.Next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> npNode == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> second.Next</span><br><span class="line">    &#125;</span><br><span class="line">    npNode.Next = second.Next</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul><h4 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a>20. 有效的括号</h4><blockquote>  <p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。<br>有效字符串需满足：<br>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>注意空字符串可被认为是有效字符串。</p></blockquote><blockquote>  <p>解: 经典栈</p></blockquote><ul>  <li>code<figure class="highlight go">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre>          </td>          <td class="code">            <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValid</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> match = <span class="keyword">map</span>[<span class="keyword">byte</span>]<span class="keyword">byte</span>&#123;</span><br><span class="line">        <span class="string">')'</span>:<span class="string">'('</span>,</span><br><span class="line">        <span class="string">']'</span>:<span class="string">'['</span>,</span><br><span class="line">        <span class="string">'&#125;'</span>:<span class="string">'&#123;'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    stack := []<span class="keyword">byte</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> _,b:= <span class="keyword">range</span> []<span class="keyword">byte</span>(s)&#123;</span><br><span class="line">        <span class="keyword">switch</span> b&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'('</span>,<span class="string">'&#123;'</span>,<span class="string">'['</span>:</span><br><span class="line">                stack = <span class="built_in">append</span>(stack, b)</span><br><span class="line">            <span class="keyword">case</span> <span class="string">')'</span>,<span class="string">'&#125;'</span>,<span class="string">']'</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(stack) == <span class="number">0</span> || stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>] != match[b]&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            stack = stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(stack) == <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;11-盛最多水的容器&quot;&gt;&lt;a href=&quot;#11-盛最多水的容器&quot; class=&quot;headerlink&quot; title=&quot;11. 盛最多水的容器&quot;&gt;&lt;/a&gt;11. 盛最多水的容器&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。&lt;/p&gt;
  &lt;p&gt;说明：你不能倾斜容器，且 n 的值至少为 2。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/pasted-1.png&quot; alt=&quot;upload successful&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;解: 1.如果可以使用暴力，很多事情就变得简单了。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AntDesign 圣诞节彩蛋</title>
    <link href="http://ipiao.top/2018/12/26/AntDesign-%E5%9C%A3%E8%AF%9E%E8%8A%82%E5%BD%A9%E8%9B%8B/"/>
    <id>http://ipiao.top/2018/12/26/AntDesign-圣诞节彩蛋/</id>
    <published>2018-12-26T02:02:00.000Z</published>
    <updated>2018-12-26T02:34:31.152Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Ho-Ho-Ho"><a href="#Ho-Ho-Ho" class="headerlink" title="Ho! Ho! Ho!"></a>Ho! Ho! Ho!</h4><ul>  <li>    <p>昨天，蚂蚁金服被喷了，原因是其开源带代码(<a href="https://github.com/ant-design/ant-design" target="_blank" rel="noopener">https://github.com/ant-design/ant-design</a>) 里埋下一个在圣诞节才触发的彩蛋。不凑巧的是，某部最近才发文，思想是“中国人不过洋节”。</p>  </li>  <li>    <p>于是,在第一个洋节就出了一堆彩蛋引发的事件，情节严重者就要失业、背锅。传称，“在代码里下毒”。AntDesign自然而然遭遇炮轰(<a href="https://github.com/ant-design/ant-design/issues/13848" target="_blank" rel="noopener">https://github.com/ant-design/ant-design/issues/13848</a>) 。</p>  </li></ul><a id="more"></a><ul>  <li>作为一名吃瓜群众，本着看戏不嫌热闹的精神，表示对开源者的支持。开源本来就是一项高度自由的活动。只不过不同于我们这类低等开发者，成功的开源框架有了大量的受众，或多或少会影响到这项受众的利益。但是在受众为开源框架锁惊叹，收到褒奖的时候，缺不见得有感恩戴德的表现。同时，某种习性让我们不由自主的找寻一个背锅侠，于是矛头指向开源者。但是，第一责任人不可否认的是开发者本人啊。且不说开发者的能力问题，开发本是开发者的职责，使用别人的框架是节省了不少成本的，甚至大多比自己做的好。在使用开源框架的时候，我想很多了都有承受<code>bug</code>的准备。可是，彩蛋和<code>bug</code>其实有什么区别呢。对于开发者，都是预料之外的问题罢了。</li></ul><p><img src="/images/pasted-0.png" alt="ant-design 彩蛋网图"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Ho-Ho-Ho&quot;&gt;&lt;a href=&quot;#Ho-Ho-Ho&quot; class=&quot;headerlink&quot; title=&quot;Ho! Ho! Ho!&quot;&gt;&lt;/a&gt;Ho! Ho! Ho!&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;昨天，蚂蚁金服被喷了，原因是其开源带代码(&lt;a href=&quot;https://github.com/ant-design/ant-design&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/ant-design/ant-design&lt;/a&gt;) 里埋下一个在圣诞节才触发的彩蛋。不凑巧的是，某部最近才发文，思想是“中国人不过洋节”。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;于是,在第一个洋节就出了一堆彩蛋引发的事件，情节严重者就要失业、背锅。传称，“在代码里下毒”。AntDesign自然而然遭遇炮轰(&lt;a href=&quot;https://github.com/ant-design/ant-design/issues/13848&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/ant-design/ant-design/issues/13848&lt;/a&gt;) 。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="闲文野趣" scheme="http://ipiao.top/categories/%E9%97%B2%E6%96%87%E9%87%8E%E8%B6%A3/"/>
    
    
      <category term="吃瓜" scheme="http://ipiao.top/tags/%E5%90%83%E7%93%9C/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 6-10</title>
    <link href="http://ipiao.top/2018/12/25/Leetcode-6-10/"/>
    <id>http://ipiao.top/2018/12/25/Leetcode-6-10/</id>
    <published>2018-12-25T07:14:00.000Z</published>
    <updated>2018-12-27T10:35:12.942Z</updated>
    
    <content type="html"><![CDATA[<h4 id="6-Z-字形变换"><a href="#6-Z-字形变换" class="headerlink" title="6. Z 字形变换"></a>6. Z 字形变换</h4><blockquote>  <p>将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。比如输入字符串 为”LEETCODEISHIRING” 行数为 3 时，排列如下（忽略下划线）：<br> L _ C _ I _ R<br> E T O E S I I G<br> E _ D _ H _ N<br>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：”LCIRETOESIIGEDHN”。请你实现这个将字符串进行指定行数变换的函数。</p></blockquote><a id="more"></a><blockquote>  <p>解: 这是一个有规律的图形阵，没什么可说的，直接套规律公式，避免一切花里胡哨</p></blockquote><ul>  <li>    <p>code</p>    <figure class="highlight go">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre>          </td>          <td class="code">            <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convert</span><span class="params">(s <span class="keyword">string</span>, numRows <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> numRows == <span class="number">1</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    &#125;</span><br><span class="line">    rs := []<span class="keyword">rune</span>(s)</span><br><span class="line">    l := <span class="built_in">len</span>(rs)</span><br><span class="line"></span><br><span class="line">    ret := []<span class="keyword">rune</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; numRows; i++ &#123;</span><br><span class="line">        j := <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            ind := (<span class="number">2</span>*numRows<span class="number">-2</span>)*j + i</span><br><span class="line">            <span class="keyword">if</span> ind &lt; l &#123;</span><br><span class="line">                ret = <span class="built_in">append</span>(ret, rs[ind])</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> i != <span class="number">0</span> &amp;&amp; i != numRows<span class="number">-1</span> &#123;</span><br><span class="line">                ind2 := (<span class="number">2</span>*numRows<span class="number">-2</span>)*(j+<span class="number">1</span>) - i</span><br><span class="line">                <span class="keyword">if</span> ind2 &lt; l &#123;</span><br><span class="line">                    ret = <span class="built_in">append</span>(ret, rs[ind2])</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            j++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">string</span>(ret)</span><br><span class="line">&#125;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul><h4 id="7-整数反转"><a href="#7-整数反转" class="headerlink" title="7. 整数反转"></a>7. 整数反转</h4><blockquote>  <p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转</p></blockquote><ul>  <li>code<figure class="highlight go">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre>          </td>          <td class="code">            <pre><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">reverse</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -(reverse(-x))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> y <span class="keyword">int32</span> = <span class="keyword">int32</span>(x)</span><br><span class="line">    bl := []<span class="keyword">int32</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> y &gt; <span class="number">0</span> &#123;</span><br><span class="line">        bl = <span class="built_in">append</span>(bl, y%<span class="number">10</span>)</span><br><span class="line">        y = y / <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ret <span class="keyword">int32</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(bl); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> ret &gt; (math.MaxInt32-bl[i])/<span class="number">10</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        ret = <span class="number">10</span>*ret + bl[i]</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">int</span>(ret)</span><br><span class="line">&#125;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul><h4 id="8-字符串转换整数-atoi"><a href="#8-字符串转换整数-atoi" class="headerlink" title="8. 字符串转换整数 (atoi)"></a>8. 字符串转换整数 (atoi)</h4><blockquote>  <p>请你来实现一个 atoi 函数，使其能将字符串转换成整数。</p>  <p>首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。</p>  <p>当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。</p>  <p>该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。</p>  <p>注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。</p>  <p>在任何情况下，若函数不能进行有效的转换时，请返回 0。</p>  <p>说明：</p>  <p>假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231, 231 − 1]。如果数值超过这个范围，qing返回 INT_MAX (231 − 1) 或 INT_MIN (−231) 。</p></blockquote><ul>  <li>    <p>code</p>    <figure class="highlight go">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre>          </td>          <td class="code">            <pre><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">myAtoi</span><span class="params">(str <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> max = math.MaxInt32</span><br><span class="line">    bas := <span class="number">1</span> <span class="comment">// 乘子</span></span><br><span class="line">    nbs := <span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    start:=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="keyword">range</span> str&#123;</span><br><span class="line">        b:=str[i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> !start&#123;</span><br><span class="line">            <span class="keyword">if</span> b==<span class="string">' '</span>&#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> b == <span class="string">'-'</span>&#123;</span><br><span class="line">                bas = <span class="number">-1</span></span><br><span class="line">                start = <span class="literal">true</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> b==<span class="string">'+'</span>&#123; </span><br><span class="line">                start = <span class="literal">true</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="string">'0'</span>&lt;=b &amp;&amp; b&lt;=<span class="string">'9'</span>&#123;</span><br><span class="line">                start = <span class="literal">true</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'0'</span>&lt;=b &amp;&amp; b&lt;=<span class="string">'9'</span>&#123;</span><br><span class="line">            nbs=<span class="built_in">append</span>(nbs,<span class="keyword">int</span>(b-<span class="string">'0'</span>))</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> bas == <span class="number">-1</span>&#123;</span><br><span class="line">        max += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    ret:=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="built_in">len</span>(nbs);i++&#123;</span><br><span class="line">        <span class="keyword">if</span> ret&gt;max/<span class="number">10</span> || (ret==max/<span class="number">10</span> &amp;&amp; nbs[i]&gt;max%<span class="number">10</span>)&#123;</span><br><span class="line">            ret = max</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        ret = ret*<span class="number">10</span> + nbs[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bas * ret</span><br><span class="line">&#125;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul><h4 id="9-回文数"><a href="#9-回文数" class="headerlink" title="9. 回文数"></a>9. 回文数</h4><blockquote>  <p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p></blockquote><blockquote>  <p>解: TIP:反转一半就可以了</p></blockquote><ul>  <li>code<figure class="highlight go">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre>          </td>          <td class="code">            <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPalindrome</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">     <span class="keyword">if</span> x&lt;<span class="number">0</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> x==<span class="number">0</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">var</span> bl []<span class="keyword">int</span></span><br><span class="line">     <span class="keyword">for</span> x&gt;<span class="number">0</span>&#123;</span><br><span class="line">         bl = <span class="built_in">append</span>(bl, x%<span class="number">10</span>)</span><br><span class="line">         x = x/<span class="number">10</span></span><br><span class="line">     &#125;</span><br><span class="line">     l:=<span class="built_in">len</span>(bl)/<span class="number">2</span></span><br><span class="line">     <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;l;i++&#123;</span><br><span class="line">         <span class="keyword">if</span> bl[i]!=bl[<span class="built_in">len</span>(bl)-i<span class="number">-1</span>]&#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"> &#125;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul><h4 id="10-正则表达式匹配"><a href="#10-正则表达式匹配" class="headerlink" title="10. 正则表达式匹配"></a>10. 正则表达式匹配</h4><blockquote>  <p>给定一个字符串 (s) 和一个字符模式 (p)。实现支持 ‘.’ 和 ‘*’ 的正则表达式匹配。</p>  <p>‘.’ 匹配任意单个字符。<br>‘*’ 匹配零个或多个前面的元素。<br>匹配应该覆盖整个字符串 (s) ，而不是部分字符串。</p>  <p>说明:</p>  <p>s 可能为空，且只包含从 a-z 的小写字母。<br>p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。</p></blockquote><blockquote>  <p>解: 递归，很明显的</p></blockquote><ul>  <li>    <p>code</p>    <figure class="highlight go">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre>          </td>          <td class="code">            <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isMatch</span><span class="params">(s <span class="keyword">string</span>, p <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    lp := <span class="built_in">len</span>(p)</span><br><span class="line">    ls := <span class="built_in">len</span>(s)</span><br><span class="line">    <span class="keyword">if</span> ls == <span class="number">0</span> &amp;&amp; lp == <span class="number">0</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ls !=<span class="number">0</span> &amp;&amp; lp == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ls == <span class="number">0</span> &amp;&amp; lp!=<span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> p[lp<span class="number">-1</span>] == <span class="string">'*'</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> lp == <span class="number">1</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> isMatch(s, p[:lp<span class="number">-2</span>])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> p[lp<span class="number">-1</span>] == <span class="string">'.'</span> || p[lp<span class="number">-1</span>] == s[ls<span class="number">-1</span>]&#123;</span><br><span class="line">        <span class="keyword">return</span> isMatch(s[:ls<span class="number">-1</span>], p[:lp<span class="number">-1</span>])</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span> p[lp<span class="number">-1</span>] == <span class="string">'*'</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> isMatch(s, p[:lp<span class="number">-2</span>])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s[ls<span class="number">-1</span>] == p[lp<span class="number">-2</span>] || p[lp<span class="number">-2</span>] == <span class="string">'.'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> isMatch(s[:ls<span class="number">-1</span>], p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;6-Z-字形变换&quot;&gt;&lt;a href=&quot;#6-Z-字形变换&quot; class=&quot;headerlink&quot; title=&quot;6. Z 字形变换&quot;&gt;&lt;/a&gt;6. Z 字形变换&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。比如输入字符串 为”LEETCODEISHIRING” 行数为 3 时，排列如下（忽略下划线）：&lt;br&gt; L _ C _ I _ R&lt;br&gt; E T O E S I I G&lt;br&gt; E _ D _ H _ N&lt;br&gt;之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：”LCIRETOESIIGEDHN”。请你实现这个将字符串进行指定行数变换的函数。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="日常练习" scheme="http://ipiao.top/categories/%E6%97%A5%E5%B8%B8%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="leetcode" scheme="http://ipiao.top/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 3</title>
    <link href="http://ipiao.top/2018/12/24/Leetcode-3/"/>
    <id>http://ipiao.top/2018/12/24/Leetcode-3/</id>
    <published>2018-12-24T09:03:00.000Z</published>
    <updated>2018-12-26T10:20:36.451Z</updated>
    
    <content type="html"><![CDATA[<h4 id="字符串的排列"><a href="#字符串的排列" class="headerlink" title="字符串的排列"></a>字符串的排列</h4><blockquote>  <p>给定两个字符串 s1 和 s2，写一个函数来判断 s2 是否包含 s1 的排列。换句话说，第一个字符串的排列之一是第二个字符串的子串。注意：</p>  <ol>    <li>输入的字符串只包含小写字母</li>    <li>两个字符串的长度都在 [1, 10,000] 之间</li>  </ol></blockquote><ul>  <li>code </li></ul><figure class="highlight go">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkInclusion</span><span class="params">(s1 <span class="keyword">string</span>, s2 <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s1) &gt; <span class="built_in">len</span>(s2) &#123; <span class="comment">// 长度比较</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    v1 := sumstring(s1)</span><br><span class="line">    i:=<span class="built_in">len</span>(s1)</span><br><span class="line">    v2 := sumstring(s2[:i])</span><br><span class="line">    <span class="keyword">for</span> i &lt;= <span class="built_in">len</span>(s2) &#123;</span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="built_in">len</span>(s1)&#123;</span><br><span class="line">            v2 += <span class="keyword">int</span>(s2[i<span class="number">-1</span>]) - <span class="keyword">int</span>(s2[i-<span class="built_in">len</span>(s1)<span class="number">-1</span>])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> v1 == v2 &#123; <span class="comment">// 在字符值相等的情况下才去判断是否是排列</span></span><br><span class="line">            <span class="keyword">if</span> p(s1, s2[i-<span class="built_in">len</span>(s1):i]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sumstring</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123; <span class="comment">// 计算string值</span></span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> s &#123;</span><br><span class="line">        sum += <span class="keyword">int</span>(s[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">p</span><span class="params">(b1, b2 <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;  <span class="comment">// 判断是否是排列，也可以用排序算法降低空间复杂度</span></span><br><span class="line">    m1 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">byte</span>]<span class="keyword">int</span>)</span><br><span class="line">    m2 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">byte</span>]<span class="keyword">int</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> b1 &#123;</span><br><span class="line">        m1[b1[i]] += <span class="number">1</span></span><br><span class="line">        m2[b2[i]] += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> b, i := <span class="keyword">range</span> m1 &#123;</span><br><span class="line">        <span class="keyword">if</span> m2[b] != i &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;字符串的排列&quot;&gt;&lt;a href=&quot;#字符串的排列&quot; class=&quot;headerlink&quot; title=&quot;字符串的排列&quot;&gt;&lt;/a&gt;字符串的排列&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;给定两个字符串 s1 和 s2，写一个函数来判断 s2 是否包含 s1 的排
      
    
    </summary>
    
      <category term="日常练习" scheme="http://ipiao.top/categories/%E6%97%A5%E5%B8%B8%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="字符串" scheme="http://ipiao.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 1-5</title>
    <link href="http://ipiao.top/2018/12/24/Leetcode-1-5/"/>
    <id>http://ipiao.top/2018/12/24/Leetcode-1-5/</id>
    <published>2018-12-24T08:15:00.000Z</published>
    <updated>2018-12-25T09:52:07.708Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h4><blockquote>  <p>给定一个整数数组<code>nums</code>和一个目标值<code>target</code>，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。</p></blockquote><blockquote>  <p>解: 目的是要返回数组下标。</p>  <ul>    <li>如果不考虑空间复杂度</li>    <li>如果考虑时间复杂度，就要保留一份数组备份，空间复杂度至少O(n),然后对数组进行排序，通过二分法查找，时间复杂度最优的是O(nlogn)</li>  </ul></blockquote><a id="more"></a><ul>  <li>    <p>code</p>    <figure class="highlight go">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre>          </td>          <td class="code">            <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line">      <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">          another := target - nums[i]</span><br><span class="line">          <span class="keyword">if</span> _, ok := m[another]; ok &#123;</span><br><span class="line">              <span class="keyword">return</span> []<span class="keyword">int</span>&#123;m[another], i&#125;</span><br><span class="line">          &#125;</span><br><span class="line">          m[nums[i]] = i</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">      onum := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(nums))</span><br><span class="line">      <span class="built_in">copy</span>(onum, nums) <span class="comment">// 保留备份</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// Onlgn</span></span><br><span class="line">      sort.Ints(nums) <span class="comment">// 原数组排序</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> find = <span class="function"><span class="keyword">func</span><span class="params">(anum []<span class="keyword">int</span>, dest <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; <span class="comment">// 二分查找数组中是否存在值为dest的元素</span></span><br><span class="line">          start := <span class="number">0</span></span><br><span class="line">          end := <span class="built_in">len</span>(anum) - <span class="number">1</span></span><br><span class="line">          <span class="keyword">var</span> mid <span class="keyword">int</span></span><br><span class="line">          <span class="keyword">for</span> start &lt; end<span class="number">-1</span> &#123;</span><br><span class="line">              mid = (start + end) / <span class="number">2</span></span><br><span class="line">              <span class="keyword">if</span> anum[mid] == dest &#123;</span><br><span class="line">                  <span class="keyword">return</span> mid</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> anum[mid] &gt; dest &#123;</span><br><span class="line">                  end = mid</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  start = mid</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> anum[start] == dest &#123;</span><br><span class="line">              <span class="keyword">return</span> start</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> anum[end] == dest &#123;</span><br><span class="line">              <span class="keyword">return</span> end</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 遍历数组匹配</span></span><br><span class="line">      <span class="keyword">for</span> i := <span class="keyword">range</span> nums &#123;</span><br><span class="line">          <span class="keyword">if</span> cj := find(nums[i+<span class="number">1</span>:], target-nums[i]); cj != <span class="number">-1</span> &#123;</span><br><span class="line">              <span class="keyword">var</span> ret = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line">              <span class="keyword">for</span> j := <span class="keyword">range</span> onum &#123;</span><br><span class="line">                  <span class="keyword">if</span> onum[j] == nums[i] || onum[j] == nums[i+<span class="number">1</span>+cj] &#123;</span><br><span class="line">                      ret = <span class="built_in">append</span>(ret, j)</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">return</span> ret</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul><h4 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2. 两数相加"></a>2. 两数相加</h4><blockquote>  <p>给出两个非空的链表用来表示两个非负的整数。其中，它们各自的位数是按照逆序的方式存储的，并且它们的每个节点只能存储一位数字。如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。您可以假设除了数字0之外，这两个数都不会以0开头。</p></blockquote><blockquote>  <p>解: 注意的只有两点</p>  <ul>    <li>进位</li>    <li>链表遍历到最后做长度判断和拼接</li>  </ul></blockquote><ul>  <li>    <p>code</p>    <figure class="highlight go">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre>          </td>          <td class="code">            <pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addTwoNumbers</span><span class="params">(l1 *ListNode, l2 *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> l1 == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> l2</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> l2 == <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> l1</span><br><span class="line">    &#125;</span><br><span class="line">    node := <span class="built_in">new</span>(ListNode)</span><br><span class="line">    sum := l1.Val + l2.Val</span><br><span class="line">    node.Next = addTwoNumbers(l1.Next,l2.Next)</span><br><span class="line">    <span class="keyword">if</span> sum &lt;<span class="number">10</span>&#123;</span><br><span class="line">        node.Val = sum</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        node.Val = sum <span class="number">-10</span></span><br><span class="line">        node.Next = addTwoNumbers(node.Next, &amp;ListNode&#123;Val:<span class="number">1</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line">&#125;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul><h4 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3. 无重复字符的最长子串"></a>3. 无重复字符的最长子串</h4><blockquote>  <p>给定一个字符串，请你找出其中不含有重复字符的<strong>最长子串</strong>的长度</p></blockquote><ul>  <li>    <p>code</p>    <figure class="highlight go">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre>          </td>          <td class="code">            <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> bMap = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">rune</span>]<span class="keyword">int</span>) <span class="comment">// 存储字符索引，用于判断重复</span></span><br><span class="line">    <span class="keyword">var</span> startInd = <span class="number">0</span>              <span class="comment">// 有效点开始</span></span><br><span class="line">    <span class="keyword">var</span> maxLen = <span class="number">0</span>                <span class="comment">// 长度</span></span><br><span class="line">    <span class="keyword">for</span> i, r := <span class="keyword">range</span> s &#123;</span><br><span class="line">        ind,ok :=  bMap[r]</span><br><span class="line">        <span class="keyword">if</span> ok &amp;&amp; ind &gt;= startInd &#123;  <span class="comment">// 判断是否在有效区间内重复</span></span><br><span class="line">             startInd = ind + <span class="number">1</span>     <span class="comment">// 如果是，直接修改起始有效索引，没有比较的必要</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            l := i - startInd + <span class="number">1</span>   <span class="comment">// 否则，每一步计算当前有效区间长度，避免临界问题</span></span><br><span class="line">            <span class="keyword">if</span> l &gt; maxLen&#123;          <span class="comment">// 与已有最大长度比较，如果超过最大长度就更新</span></span><br><span class="line">                maxLen = l</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        bMap[r] = i                 <span class="comment">// 赋值覆盖</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLen</span><br><span class="line">&#125;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul><h4 id="4-寻找两个有序数组的中位数"><a href="#4-寻找两个有序数组的中位数" class="headerlink" title="4. 寻找两个有序数组的中位数"></a>4. 寻找两个有序数组的中位数</h4><blockquote>  <p>给定两个大小为m和n的有序数组nums1和nums2请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为O(log(m + n))。你可以假设nums1和nums2不会同时为空。</p></blockquote><blockquote>  <p>解：有序数组，要求时间复杂度是O(log)级别的，应该是要使用二分法的。但是直接的二分法似乎没有可行之路，逐步分析下，发现通过递归可以实现。</p></blockquote><ul>  <li>    <p>code</p>    <figure class="highlight go">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre>          </td>          <td class="code">            <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMedianSortedArrays</span><span class="params">(nums1 []<span class="keyword">int</span>, nums2 []<span class="keyword">int</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    total := <span class="built_in">len</span>(nums1) + <span class="built_in">len</span>(nums2)</span><br><span class="line">    <span class="keyword">if</span> total%<span class="number">2</span> == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">float64</span>(findKthNum(nums1, nums2, total/<span class="number">2</span>+<span class="number">1</span>))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.5</span> * <span class="keyword">float64</span>(findKthNum(nums1, nums2, total/<span class="number">2</span>)+findKthNum(nums1, nums2, total/<span class="number">2</span>+<span class="number">1</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找第k个数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findKthNum</span><span class="params">(nums1, nums2 []<span class="keyword">int</span>, k <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    l1, l2 := <span class="built_in">len</span>(nums1), <span class="built_in">len</span>(nums2)</span><br><span class="line">    <span class="keyword">if</span> l1 &gt; l2 &#123;</span><br><span class="line">        <span class="keyword">return</span> findKthNum(nums2, nums1, k)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> l1 == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nums2[k<span class="number">-1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> nums1[<span class="number">0</span>] &lt; nums2[<span class="number">0</span>] &#123;</span><br><span class="line">            <span class="keyword">return</span> nums1[<span class="number">0</span>]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> nums2[<span class="number">0</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> pa, pb <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">if</span> l1 &lt; k/<span class="number">2</span> &#123;</span><br><span class="line">        pa = l1</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        pa = k / <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">    pb = k - pa</span><br><span class="line">    <span class="comment">// 比较较小端可以直接去除，不可能落在那里面，类二分</span></span><br><span class="line">    <span class="keyword">if</span> nums1[pa<span class="number">-1</span>] &lt; nums2[pb<span class="number">-1</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> findKthNum(nums1[pa:], nums2, k-pa)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> nums2[pb<span class="number">-1</span>] &lt; nums1[pa<span class="number">-1</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> findKthNum(nums1, nums2[pb:], k-pb)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nums1[pa<span class="number">-1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul><h4 id="5-最长回文子串"><a href="#5-最长回文子串" class="headerlink" title="5. 最长回文子串"></a>5. 最长回文子串</h4><blockquote>  <p>给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。</p></blockquote><blockquote>  <p>解: 硬算</p></blockquote><ul>  <li>    <p>code</p>    <figure class="highlight go">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre>          </td>          <td class="code">            <pre><span class="line"> <span class="function"><span class="keyword">func</span> <span class="title">longestPalindrome</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    rs := []<span class="keyword">rune</span>(s)</span><br><span class="line">    l := <span class="built_in">len</span>(rs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> l&lt;=<span class="number">1</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mp := rs[<span class="number">0</span>:<span class="number">1</span>] <span class="comment">// 最长子串</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; l<span class="number">-1</span>; i++ &#123;</span><br><span class="line">        temp1 := findPalindrome(rs, i, i)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(temp1) &gt; <span class="built_in">len</span>(mp) &#123;</span><br><span class="line">            mp = temp1</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> rs[i] == rs[i+<span class="number">1</span>] &#123;</span><br><span class="line">            temp2 := findPalindrome(rs, i, i+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(temp2) &gt; <span class="built_in">len</span>(mp) &#123;</span><br><span class="line">                mp = temp2</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">string</span>(mp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findPalindrome</span><span class="params">(rs []<span class="keyword">rune</span>, si, ei <span class="keyword">int</span>)</span> []<span class="title">rune</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> si &gt; <span class="number">0</span> &amp;&amp; ei &lt; <span class="built_in">len</span>(rs)<span class="number">-1</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> rs[si<span class="number">-1</span>] == rs[ei+<span class="number">1</span>] &#123;</span><br><span class="line">            si--</span><br><span class="line">            ei++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rs[si : ei+<span class="number">1</span>]</span><br><span class="line">&#125;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-两数之和&quot;&gt;&lt;a href=&quot;#1-两数之和&quot; class=&quot;headerlink&quot; title=&quot;1. 两数之和&quot;&gt;&lt;/a&gt;1. 两数之和&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;给定一个整数数组&lt;code&gt;nums&lt;/code&gt;和一个目标值&lt;code&gt;target&lt;/code&gt;，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
  &lt;p&gt;解: 目的是要返回数组下标。&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;如果不考虑空间复杂度&lt;/li&gt;
    &lt;li&gt;如果考虑时间复杂度，就要保留一份数组备份，空间复杂度至少O(n),然后对数组进行排序，通过二分法查找，时间复杂度最优的是O(nlogn)&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="日常练习" scheme="http://ipiao.top/categories/%E6%97%A5%E5%B8%B8%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="leetcode" scheme="http://ipiao.top/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Project Euler 1</title>
    <link href="http://ipiao.top/2018/12/24/Project-Euler-1/"/>
    <id>http://ipiao.top/2018/12/24/Project-Euler-1/</id>
    <published>2018-12-24T07:28:00.000Z</published>
    <updated>2018-12-24T08:14:18.361Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-3的倍数和5的倍数"><a href="#1-3的倍数和5的倍数" class="headerlink" title="1.3的倍数和5的倍数"></a>1.3的倍数和5的倍数</h4><blockquote>  <p>如果我们列出10以内所有3或5的倍数，我们将得到3、5、6和9，这些数的和是23。求1000以内所有3或5的倍数的和。</p></blockquote><blockquote>  <ul>    <li>中学经典求和问题。计算 和=3的倍数和+5的倍数和-15的倍数和。<figure class="highlight lsl">        <table>          <tr>            <td class="gutter">              <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>            </td>            <td class="code">              <pre><span class="line"><span class="number">3</span>的倍数和 s1 = <span class="number">333</span>*<span class="number">334</span>/<span class="number">2</span>*<span class="number">3</span> = <span class="number">166833</span></span><br><span class="line"><span class="number">5</span>的倍数和 s2 = <span class="number">199</span>*<span class="number">200</span>/<span class="number">2</span>*<span class="number">5</span> = <span class="number">99500</span></span><br><span class="line"><span class="number">15</span>的倍数和 s3 = <span class="number">66</span>*<span class="number">67</span>/<span class="number">2</span>*<span class="number">15</span> = <span class="number">33165</span></span><br><span class="line">s = <span class="number">233168</span></span><br></pre>            </td>          </tr>        </table>      </figure>    </li>  </ul></blockquote><blockquote>  <ul>    <li>code<figure class="highlight clean">        <table>          <tr>            <td class="gutter">              <pre><span class="line">1</span><br></pre>            </td>            <td class="code">              <pre><span class="line">...</span><br></pre>            </td>          </tr>        </table>      </figure>    </li>  </ul></blockquote><a id="more"></a><h4 id="2-偶斐波那契数"><a href="#2-偶斐波那契数" class="headerlink" title="2.偶斐波那契数"></a>2.偶斐波那契数</h4><blockquote>  <p>斐波那契数列中的每一项都是前两项的和。由1和2开始生成的斐波那契数列前10项为：1, 2, 3, 5, 8, 13, 21, 34, 55, 89, … 考虑该斐波那契数列中不超过四百万的项，求其中为偶数的项之和。。</p></blockquote><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-3的倍数和5的倍数&quot;&gt;&lt;a href=&quot;#1-3的倍数和5的倍数&quot; class=&quot;headerlink&quot; title=&quot;1.3的倍数和5的倍数&quot;&gt;&lt;/a&gt;1.3的倍数和5的倍数&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;如果我们列出10以内所有3或5的倍数，我们将得到3、5、6和9，这些数的和是23。求1000以内所有3或5的倍数的和。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;中学经典求和问题。计算 和=3的倍数和+5的倍数和-15的倍数和。&lt;figure class=&quot;highlight lsl&quot;&gt;
        &lt;table&gt;
          &lt;tr&gt;
            &lt;td class=&quot;gutter&quot;&gt;
              &lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;
            &lt;/td&gt;
            &lt;td class=&quot;code&quot;&gt;
              &lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;的倍数和 s1 = &lt;span class=&quot;number&quot;&gt;333&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;334&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;166833&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;的倍数和 s2 = &lt;span class=&quot;number&quot;&gt;199&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;99500&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;的倍数和 s3 = &lt;span class=&quot;number&quot;&gt;66&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;67&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;33165&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s = &lt;span class=&quot;number&quot;&gt;233168&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;
            &lt;/td&gt;
          &lt;/tr&gt;
        &lt;/table&gt;
      &lt;/figure&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;code&lt;figure class=&quot;highlight clean&quot;&gt;
        &lt;table&gt;
          &lt;tr&gt;
            &lt;td class=&quot;gutter&quot;&gt;
              &lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;
            &lt;/td&gt;
            &lt;td class=&quot;code&quot;&gt;
              &lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;
            &lt;/td&gt;
          &lt;/tr&gt;
        &lt;/table&gt;
      &lt;/figure&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="我爱数学" scheme="http://ipiao.top/categories/%E6%88%91%E7%88%B1%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="pe" scheme="http://ipiao.top/tags/pe/"/>
    
  </entry>
  
  <entry>
    <title>链表（一）</title>
    <link href="http://ipiao.top/2018/12/17/%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88%E6%B3%95/"/>
    <id>http://ipiao.top/2018/12/17/快慢指针法/</id>
    <published>2018-12-17T03:27:00.000Z</published>
    <updated>2018-12-17T08:33:13.332Z</updated>
    
    <content type="html"><![CDATA[<h4 id="快慢指针法"><a href="#快慢指针法" class="headerlink" title="快慢指针法"></a>快慢指针法</h4><ul>  <li>基本算法：<a href="https://www.cnblogs.com/songdechiu/p/6686520.html" target="_blank" rel="noopener">https://www.cnblogs.com/songdechiu/p/6686520.html</a> </li>  <li>扩展应用：<a href="https://www.cnblogs.com/hxsyl/p/4395794.html" target="_blank" rel="noopener">https://www.cnblogs.com/hxsyl/p/4395794.html</a></li></ul><blockquote>  <p>判断一个链表是否存在环<br><a id="more"></a>  </p></blockquote><ul>  <li>code</li></ul><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(head.next==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(head.next.next==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        ListNode slow=head;</span><br><span class="line">        ListNode fast=head;</span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="keyword">null</span> &amp;&amp; fast.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">             slow=slow.next;</span><br><span class="line">             fast=fast.next.next;</span><br><span class="line">             <span class="keyword">if</span>(fast==slow)&#123;</span><br><span class="line">                 <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;快慢指针法&quot;&gt;&lt;a href=&quot;#快慢指针法&quot; class=&quot;headerlink&quot; title=&quot;快慢指针法&quot;&gt;&lt;/a&gt;快慢指针法&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;基本算法：&lt;a href=&quot;https://www.cnblogs.com/songdechiu/p/6686520.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/songdechiu/p/6686520.html&lt;/a&gt; &lt;/li&gt;
  &lt;li&gt;扩展应用：&lt;a href=&quot;https://www.cnblogs.com/hxsyl/p/4395794.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/hxsyl/p/4395794.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
  &lt;p&gt;判断一个链表是否存在环&lt;br&gt;
    
    </summary>
    
      <category term="日常练习" scheme="http://ipiao.top/categories/%E6%97%A5%E5%B8%B8%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="leetcode" scheme="http://ipiao.top/tags/leetcode/"/>
    
      <category term="链表" scheme="http://ipiao.top/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>数——丑数</title>
    <link href="http://ipiao.top/2018/12/17/%E4%B8%91%E6%95%B0%E8%AE%A1%E7%AE%97/"/>
    <id>http://ipiao.top/2018/12/17/丑数计算/</id>
    <published>2018-12-17T02:37:00.000Z</published>
    <updated>2018-12-17T08:35:01.619Z</updated>
    
    <content type="html"><![CDATA[<h4 id="丑数计算"><a href="#丑数计算" class="headerlink" title="丑数计算"></a>丑数计算</h4><blockquote>  <p>要求输入一个n数输出第n个丑数。丑数是素因子只有2,3,5,7…</p></blockquote><a id="more"></a><figure class="highlight go">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="keyword">package</span> cal</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"math"</span></span><br><span class="line"><span class="string">"sort"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ugly 丑数，基础</span></span><br><span class="line"><span class="comment">// base 素数数组 可以是 2,3,5|3,5,7</span></span><br><span class="line"><span class="keyword">type</span> Ugly <span class="keyword">struct</span> &#123;</span><br><span class="line">base  []<span class="keyword">int</span>   <span class="comment">// 基础素因子</span></span><br><span class="line">bmul  <span class="keyword">int</span>     <span class="comment">// 基础素因子 乘积</span></span><br><span class="line">cbase [][]<span class="keyword">int</span> <span class="comment">// 素因子对应的第i次计算次数</span></span><br><span class="line">ranks [][]<span class="keyword">int</span> <span class="comment">// 素因子各次值排序</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewUgly 创建一个丑数计算基础</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewUgly</span><span class="params">(base []<span class="keyword">int</span>)</span> *<span class="title">Ugly</span></span> &#123;</span><br><span class="line">sort.Ints(base)</span><br><span class="line">u := &amp;Ugly&#123;</span><br><span class="line">base: base,</span><br><span class="line">bmul: mul(base),</span><br><span class="line">&#125;</span><br><span class="line">u.calNext()</span><br><span class="line"><span class="keyword">return</span> u</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get 获取第n个丑数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *Ugly)</span> <span class="title">Get</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> sumLen(u.ranks) &lt; n &#123;</span><br><span class="line">u.calNext()</span><br><span class="line">&#125;</span><br><span class="line">sl := <span class="number">0</span></span><br><span class="line">ret := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> u.ranks &#123;</span><br><span class="line">li := <span class="built_in">len</span>(u.ranks[i])</span><br><span class="line"><span class="keyword">if</span> sl+li &gt;= n &#123;</span><br><span class="line">ret = u.ranks[i][n-sl<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">sl += li</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第n次计算</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *Ugly)</span> <span class="title">calNext</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> n = <span class="built_in">len</span>(u.cbase) + <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> bb = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(u.base))</span><br><span class="line"><span class="keyword">for</span> i, b := <span class="keyword">range</span> u.base &#123;</span><br><span class="line">bb[i] = maxc(pow(u.bmul, n), b)</span><br><span class="line">&#125;</span><br><span class="line">u.cbase = <span class="built_in">append</span>(u.cbase, bb)</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">bn := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(bb))</span><br><span class="line"><span class="keyword">var</span> rank []<span class="keyword">int</span></span><br><span class="line">min := pow(u.bmul, n<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">for</span> autoAdd(bn, bb) &#123;</span><br><span class="line">pm := powmul(u.base, bn)</span><br><span class="line"><span class="keyword">if</span> pm &gt; min &amp;&amp; pm &lt;= pow(u.bmul, n) &#123;</span><br><span class="line">rank = <span class="built_in">append</span>(rank, pm)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sort.Ints(rank)</span><br><span class="line">u.ranks = <span class="built_in">append</span>(u.ranks, rank)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多元排序自增</span></span><br><span class="line"><span class="comment">// 返回是否还有下一个</span></span><br><span class="line"><span class="comment">// ln下限</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">autoAdd</span><span class="params">(bn, ln []<span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> bn[<span class="number">0</span>] &lt; ln[<span class="number">0</span>] &#123;</span><br><span class="line">bn[<span class="number">0</span>]++</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">bn[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(bn) == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> autoAdd(bn[<span class="number">1</span>:], ln[<span class="number">1</span>:])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取a以b为底的整数部分</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxc</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">int</span>(math.Log(<span class="keyword">float64</span>(a)) / math.Log(<span class="keyword">float64</span>(b)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取乘积</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mul</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">ret := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> _, n := <span class="keyword">range</span> nums &#123;</span><br><span class="line">ret *= n</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组所有长度</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sumLen</span><span class="params">(a [][]<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">l := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _, aa := <span class="keyword">range</span> a &#123;</span><br><span class="line">l += <span class="built_in">len</span>(aa)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pow</span><span class="params">(x, n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">ret := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">ret *= x</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">powmul</span><span class="params">(a, b []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> c = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(a))</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> a &#123;</span><br><span class="line">c[i] = pow(a[i], b[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> mul(c)</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h5 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h5><figure class="highlight css">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="selector-tag">func</span> <span class="selector-tag">TestUgly</span>(<span class="selector-tag">t</span> *<span class="selector-tag">testing</span><span class="selector-class">.T</span>) &#123;</span><br><span class="line">    <span class="attribute">ug </span>:= <span class="built_in">NewUgly</span>([]int&#123;2, 3, 5&#125;)</span><br><span class="line">    n := ug.<span class="built_in">Get</span>(1500)</span><br><span class="line">    t.<span class="built_in">Log</span>(n)</span><br><span class="line">    t.<span class="built_in">Log</span>(sumLen(ug.ranks))</span><br><span class="line">    // t.<span class="built_in">Log</span>(ug.ranks)</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h5 id="返回结果-与网上一些博客给出的答案859963392有差距1个index，本人是以2作为第一个丑数的"><a href="#返回结果-与网上一些博客给出的答案859963392有差距1个index，本人是以2作为第一个丑数的" class="headerlink" title="返回结果,与网上一些博客给出的答案859963392有差距1个index，本人是以2作为第一个丑数的"></a>返回结果,与网上一些博客给出的答案<code>859963392</code>有差距1个index，本人是以2作为第一个丑数的</h5><figure class="highlight bash">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>      </td>      <td class="code">        <pre><span class="line">go <span class="built_in">test</span> -v -run <span class="string">'TestUgly'</span></span><br><span class="line">=== RUN   TestUgly</span><br><span class="line">--- PASS: TestUgly (0.00s)</span><br><span class="line">    cal_test.go:32: 860934420</span><br><span class="line">    cal_test.go:33: 2254</span><br><span class="line">PASS</span><br><span class="line">ok  github.com/ipiao/metools/math/cal0.006s</span><br></pre>      </td>    </tr>  </table></figure><h5 id="附上目标丑数附近的丑数序列"><a href="#附上目标丑数附近的丑数序列" class="headerlink" title="附上目标丑数附近的丑数序列"></a>附上目标丑数附近的丑数序列</h5><figure class="highlight bash">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">810000000 816293376 819200000 820125000 829440000 838860800 839808000 843750000</span><br><span class="line">849346560 850305600 854296875 859963392 860934420 864000000 874800000 878906250</span><br><span class="line">884736000 885735000 895795200 900000000 905969664 906992640 911250000</span><br></pre>      </td>    </tr>  </table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;丑数计算&quot;&gt;&lt;a href=&quot;#丑数计算&quot; class=&quot;headerlink&quot; title=&quot;丑数计算&quot;&gt;&lt;/a&gt;丑数计算&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;要求输入一个n数输出第n个丑数。丑数是素因子只有2,3,5,7…&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="日常练习" scheme="http://ipiao.top/categories/%E6%97%A5%E5%B8%B8%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="leetcode" scheme="http://ipiao.top/tags/leetcode/"/>
    
      <category term="博客迁移" scheme="http://ipiao.top/tags/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
    
      <category term="数" scheme="http://ipiao.top/tags/%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Go return,defer,panic执行分析</title>
    <link href="http://ipiao.top/2018/12/17/Go-return-defer-panic%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90/"/>
    <id>http://ipiao.top/2018/12/17/Go-return-defer-panic执行分析/</id>
    <published>2018-12-17T02:13:00.000Z</published>
    <updated>2018-12-17T02:49:32.125Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本原则"><a href="#基本原则" class="headerlink" title="基本原则"></a>基本原则</h3><blockquote>  <ul>    <li>defer表示在函数结束前执行，并且多个defer是FILO的执行顺序</li>    <li>panic只会执行一个，recover的不算，后续的不会执行</li>    <li>return 返回与函数定义的是否带有返回参数是不一样的</li>  </ul></blockquote><a id="more"></a><h3 id="return-和-defer"><a href="#return-和-defer" class="headerlink" title="return 和 defer"></a>return 和 defer</h3><p>一个有返回值的函数，可以有以下2种定义:</p><figure class="highlight go">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="comment">// 不带有返回值参数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum1</span><span class="params">(x,y <span class="keyword">int</span>)</span><span class="title">int</span></span>&#123;</span><br><span class="line">   s := x+y</span><br><span class="line">   <span class="keyword">return</span> s <span class="comment">// 假设返回参数是唯一变量s1，这里相当于显式的把s赋值给s1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带有返回值参数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum2</span><span class="params">(x,y <span class="keyword">int</span>)</span><span class="params">(s <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">    s = x+y</span><br><span class="line">    <span class="keyword">return</span> <span class="comment">// return的一定是s</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    s1 := sum1(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">    s2 := sum2(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(s1)   <span class="comment">// 3</span></span><br><span class="line">    <span class="built_in">print</span>(s2)   <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>这sum1和sum2结果是一样的，但是组合上defer，会有不一样结果:</p><figure class="highlight go">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum3</span><span class="params">(x,y <span class="keyword">int</span>)</span><span class="title">int</span></span>&#123;</span><br><span class="line">    s := x+y</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">        s += <span class="number">2</span>  <span class="comment">// 第二步，对s进行自增运算，不影响s1的值</span></span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> s <span class="comment">// 第一步，把值赋予给s1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum4</span><span class="params">(x,y <span class="keyword">int</span>)</span><span class="params">(s <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">    s = x+y</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">        s += <span class="number">2</span> <span class="comment">// 第二步，对s进行自增运算，影响返回值s</span></span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> <span class="comment">// 第一步，把值赋予给s本身(s2:=x+y;return s2是一样的)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    s3 := sum3(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">    s4 := sum4(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">println</span>(s3)   <span class="comment">// 3</span></span><br><span class="line">    <span class="built_in">println</span>(s4)   <span class="comment">// 5</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>s3=3,s4=5，简单理解：</p><ol>  <li>函数在开始执行的时候，先初始化了它的返回值，如果未声明，随机一个tempS,如果声明了，即s</li>  <li>在执行到return（返回标志）的时候赋值。<ul>      <li>sum3函数先在执行到return时候，将tempS赋值为s，即3。由于s和tempS3是不同的变量，defer中的s+2就与tempS3无关。 </li>      <li>sum4函数由于声明了返回变量s，return时候，如果是 <code>return x+y</code>，其实将<code>x+y</code>复制给s，如果直接return，可以理解为跳过了复制操作。<br>在return之后的defer，s与sum3所谓的tempS3其实是一个，所以defer的操作是有效的。</li>    </ul>  </li></ol><h3 id="defer-和-panic"><a href="#defer-和-panic" class="headerlink" title="defer 和 panic"></a>defer 和 panic</h3><figure class="highlight go">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a <span class="keyword">int</span></span><br><span class="line">    <span class="comment">// fn1</span></span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        a = <span class="number">3</span></span><br><span class="line">        <span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            a = <span class="number">4</span></span><br><span class="line">            fmt.Println(<span class="string">"++++"</span>)</span><br><span class="line">            f := err.(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">string</span>)</span></span><br><span class="line"><span class="function">            <span class="title">fmt</span>.<span class="title">Println</span><span class="params">(err, f()</span>, <span class="title">reflect</span>.<span class="title">TypeOf</span><span class="params">(err)</span>.<span class="title">Kind</span><span class="params">()</span>.<span class="title">String</span><span class="params">()</span>)</span></span><br><span class="line"><span class="function">        &#125; <span class="title">else</span></span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">"fatal"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="comment">// fn2</span></span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        a = <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> r := <span class="built_in">recover</span>(); r != <span class="literal">nil</span> &#123;  <span class="comment">// 这里的recover()去掉感受一下效果</span></span><br><span class="line">            <span class="built_in">panic</span>(r)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">panic</span>(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"defer panic"</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;()</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">"panic1"</span>)  <span class="comment">// 这里的panic去掉感受一下效果</span></span><br><span class="line">    <span class="comment">// panic("panic2")</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><blockquote>  <p>没什么好说的…</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本原则&quot;&gt;&lt;a href=&quot;#基本原则&quot; class=&quot;headerlink&quot; title=&quot;基本原则&quot;&gt;&lt;/a&gt;基本原则&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;defer表示在函数结束前执行，并且多个defer是FILO的执行顺序&lt;/li&gt;
    &lt;li&gt;panic只会执行一个，recover的不算，后续的不会执行&lt;/li&gt;
    &lt;li&gt;return 返回与函数定义的是否带有返回参数是不一样的&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="日常练习" scheme="http://ipiao.top/categories/%E6%97%A5%E5%B8%B8%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="go" scheme="http://ipiao.top/tags/go/"/>
    
      <category term="博客迁移" scheme="http://ipiao.top/tags/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
    
  </entry>
  
  <entry>
    <title>Apns 推送表情问题</title>
    <link href="http://ipiao.top/2018/12/14/Apns-%E6%8E%A8%E9%80%81%E8%A1%A8%E6%83%85%E9%97%AE%E9%A2%98/"/>
    <id>http://ipiao.top/2018/12/14/Apns-推送表情问题/</id>
    <published>2018-12-14T02:54:00.000Z</published>
    <updated>2018-12-19T09:00:22.832Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Apns表情推送"><a href="#Apns表情推送" class="headerlink" title="Apns表情推送"></a>Apns表情推送</h3><p>1.常规的，服务端，尤其是go，发起apns推送是可以直接推送UTF-8表情的。</p><h3 id="问题场景"><a href="#问题场景" class="headerlink" title="问题场景"></a>问题场景</h3><ol>  <li>发起apns推送，用户名中有emoji表情，推送结果显示不出来。    <a id="more"></a>  </li></ol><blockquote>  <p>解决方案: 一顿操作以后，发现数据库字符是utf8mb4，字段字符集是<code>utf8_general_ci</code>。需要将字符集改成<code>utf8_unicode_ci</code>。有两种方式:</p>  <ul>    <li>直接修改数据库配置，或者值修改相应字段的字符集</li>    <li>在程序中连接mysql的时候修改连接设置(基于对连接参数设置的支持)，charset=utf8mb4&amp;collation=utf8_unicode_ci。与前者的差异是，这种修改只是针对当前连接的，以及字符集修改是针对数据库的，会产生相应的效率问题。</li>  </ul></blockquote><blockquote>  <p>    <font color="red">问题补充:</font> 发现在使用utf8_unicode_ci之后，数据库的插入出错(之前先插入缓存，所以问题没有及时发现)，所以在有插入需求的时候还是需要修改数据库的字段类型，这个时候发现<code>utf8_unicode_ci</code>就不是很好用，使用<code>utf8mb4_general_ci</code>  </p></blockquote><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>  <li><a href="https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/PayloadKeyReference.html#//apple_ref/doc/uid/TP40008194-CH17-SW1" target="_blank" rel="noopener">apns文档</a></li>  <li><a href="https://www.cnblogs.com/zhangwufei/p/7017325.html" target="_blank" rel="noopener">mysql Emoji存储方案</a></li>  <li><a href="https://blog.csdn.net/qingxili/article/details/82764072" target="_blank" rel="noopener">go 连接mysql参数设置</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Apns表情推送&quot;&gt;&lt;a href=&quot;#Apns表情推送&quot; class=&quot;headerlink&quot; title=&quot;Apns表情推送&quot;&gt;&lt;/a&gt;Apns表情推送&lt;/h3&gt;
&lt;p&gt;1.常规的，服务端，尤其是go，发起apns推送是可以直接推送UTF-8表情的。&lt;/p&gt;
&lt;h3 id=&quot;问题场景&quot;&gt;&lt;a href=&quot;#问题场景&quot; class=&quot;headerlink&quot; title=&quot;问题场景&quot;&gt;&lt;/a&gt;问题场景&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;发起apns推送，用户名中有emoji表情，推送结果显示不出来。
    
    </summary>
    
      <category term="第三方" scheme="http://ipiao.top/categories/%E7%AC%AC%E4%B8%89%E6%96%B9/"/>
    
    
      <category term="apns" scheme="http://ipiao.top/tags/apns/"/>
    
      <category term="emoji" scheme="http://ipiao.top/tags/emoji/"/>
    
  </entry>
  
</feed>
